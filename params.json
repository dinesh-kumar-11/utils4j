{
  "name": "Utils4j",
  "tagline": "A must have utility package for java",
  "body": "# utils4j\r\nA must have utility package for java\r\n\r\n\r\n[![Build Status](https://travis-ci.org/varra4u/utils4j.svg)](https://travis-ci.org/varra4u/utils4j)\r\n[![Coverage Status](https://img.shields.io/coveralls/varra4u/utils4j.svg)](https://coveralls.io/github/varra4u/utils4j?branch=master)\r\n[![Maven Central](https://maven-badges.herokuapp.com/maven-central/com.github.varra4u/utils4j/badge.svg)](https://maven-badges.herokuapp.com/maven-central/com.github.varra4u/utils4j)\r\n[![JavaDoc](https://javadoc-emblem.rhcloud.com/doc/com.github.varra4u/utils4j/badge.svg)](http://www.javadoc.io/doc/com.github.varra4u/utils4j)\r\n[![License](http://img.shields.io/:license-apache-brightgreen.svg)](http://www.apache.org/licenses/LICENSE-2.0.html)\r\n[![Stack Overflow](https://img.shields.io/:stack%20overflow-utils4j-brightgreen.svg)](http://stackoverflow.com/questions/tagged/utils4j)\r\n\r\nUtils4J is a very intellegent, flexible and generic library, built to solve the developer's day to day problems with rewriting the same redundency code in all the projects. For more details, see our [API docs][javadoc] for the latest release.\r\n\r\n### Getting a property (could be environment, properties files or Spring Context)\r\n\r\nUtils4J provides a very flexible and convenient interface to retrive the properties from any source, the beauty is no need to define the source to get the property from, as given below:\r\n\r\n```java\r\nfinal Object value = VarraProperties.getProperty(\"env\"+ StringUtils.DOT + \"property\" + StringUtils.DOT + \"name\");\r\nfinal String value = VarraProperties.getPropertyAsGeneric(\"file\"+ StringUtils.DOT + \"property\" + StringUtils.DOT + \"name\");\r\nfinal Student student = VarraProperties.getWrapperProperty(\"spring\"+ StringUtils.DOT + \"student\", Student.class);\r\n```\r\n\r\n#### Features at a Glance\r\n\r\nUtils4J provides flexible construction to create a property repository with a combination of the following features:\r\n\r\n * Automatic way of loading the properties, optionally asynchronously.\r\n * Time based eviction of properties, if you prefer to unload the entries.\r\n * Flexible way to load the spring context, and make them available as part of repo.\r\n * Automatic loading of system environment's properties and make them available as part of repo to an entire application.\r\n * asynchronous way of refreshing/reloading the properties.\r\n * Property values automatically wrapped in to the desired types.\r\n * Provides an interface for storing the todo tasks.\r\n * Asynchronous way of executing the tasks, maintains an in-memory based queue with fixed or unlimted based on configuration.\r\n * Evicts the tasks if the queue is full and notifys the evicted tasks to the listener thread in an asynchrounous way.\r\n * Provides an interface to perform some household work when the task is completed/failed.\r\n * Misc utilities for day to day developer's usage.\r\n\r\n\r\nYou can contact at anytime by raising a public issue if you find any issue or can contact to my mail id for any help.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}